#=
sampling:
- Julia version: 1.8.3
- Author: Andrea
- Date: 2023-03-02
=#

module Sampling

using ..Math: Vec2f, pif, Vec3f, dot
using Printf: @printf

function sample_disk(ruv::Vec2f)::Vec2f
    r = sqrt(ruv[2])
    phi = 2 * pif * ruv[1]
    #     @printf(
    #         "ruv: %.5f %.5f r: %.5f phi: %.5f cos(phi): %.5f sin(phi): %.5f\n",
    #         ruv[1],
    #         ruv[2],
    #         r,
    #         phi,
    #         cos(phi),
    #         sin(phi)
    #     )
    Vec2f(cos(phi) * r, sin(phi) * r)
end

values = [
    0.667704,
    0.69762427,
    0.9591144,
    0.58854663,
    0.2810341,
    0.0025638938,
    0.8427391,
    0.5417055,
    0.020327866,
    0.6285199,
    0.8888541,
    0.12186259,
    0.7904242,
    0.5038064,
    0.7804835,
    0.8503821,
    0.26118243,
    0.33605617,
    0.76835465,
    0.83341974,
    0.65957487,
    0.0068271756,
    0.4892844,
    0.21438426,
    0.92186105,
    0.1677978,
    0.06810701,
    0.39718813,
    0.72828746,
    0.39105296,
    0.9225485,
    0.81355256,
    0.4814608,
    0.046560347,
    0.017062128,
    0.4662258,
    0.5408665,
    0.2649616,
    0.3593309,
    0.42711127,
    0.8942143,
    0.82295793,
    0.7204947,
    0.25160903,
    0.120488524,
    0.8458841,
    0.42180997,
    0.4814812,
    0.82647806,
    0.8021358,
    0.38063997,
    0.36348313,
    0.44514567,
    0.6707218,
    0.08684236,
    0.9649469,
    0.6704162,
    0.64918125,
    0.709227,
    0.4820783,
    0.2982735,
    0.51921946,
    0.6365467,
    0.17383659,
    0.41350698,
    0.79901594,
    0.21174014,
    0.51343715,
    0.87627566,
    0.92294985,
    0.9554581,
    0.97293556,
    0.373949,
    0.097863555,
    0.087234974,
    0.7949227,
    0.84153134,
    0.32602674,
    0.087172806,
    0.45979798,
    0.69959205,
    0.62632865,
    0.31308234,
    0.0323838,
    0.12702262,
    0.7377147,
    0.69009966,
    0.8390782,
    0.14124972,
    0.8243311,
    0.17471355,
    0.13137811,
    0.8677204,
    0.09052968,
    0.73581225,
    0.6763893,
    0.895828,
    0.7711899,
    0.027628303,
    0.43665445,
    0.034033358,
    0.438554,
    0.43323773,
    0.22312415,
    0.55713075,
    0.3787954,
    0.96093124,
    0.027647972,
    0.33521694,
    0.06484455,
    0.11895275,
    0.6515436,
    0.25634366,
    0.9905661,
    0.46410036,
    0.62681454,
    0.87181675,
    0.29801232,
    0.79131365,
    0.55970997,
    0.8956003,
    0.5143827,
    0.7220049,
    0.061548233,
    0.47719228,
    0.9939374,
    0.53197855,
    0.24714363,
    0.4151144,
    0.1846059,
    0.91396964,
    0.3803649,
    0.9103521,
    0.23670322,
    0.4378711,
    0.01853007,
    0.8492595,
    0.11240238,
    0.05091697,
    0.15154833,
    0.9302827,
    0.19634521,
    0.031347156,
    0.8798952,
    0.4225948,
    0.96482354,
    0.67460525,
    0.29415458,
    0.7408458,
    0.7234095,
    0.6392068,
    0.18976045,
    0.24522686,
    0.75451016,
    0.17358154,
    0.5203512,
    0.7898253,
    0.4501111,
    0.32595605,
    0.06710011,
    0.9283466,
    0.71567154,
    0.8208577,
    0.6691684,
    0.45439595,
    0.99396163,
    0.8782453,
    0.54154706,
    0.65917045,
    0.3292616,
    0.94404614,
    0.9452388,
    0.81066763,
    0.093206584,
    0.22827607,
    0.93669,
    0.96401733,
    0.28151834,
    0.6280154,
    0.6762601,
    0.6996351,
    0.3800338,
    0.47075307,
    0.6329338,
    0.44212496,
    0.6219658,
    0.5910218,
    0.7719847,
    0.54216886,
    0.053619385,
    0.2866609,
    0.14646852,
    0.85222495,
    0.62945473,
    0.55325276,
    0.71342564,
    0.34837204,
    0.98545945,
    0.52935076,
    0.07996142,
    0.43990028,
    0.69797957,
    0.38581157,
    0.17230386,
    0.58654875,
    0.8002795,
    0.40828842,
    0.22951734,
    0.65129656,
    0.932265,
    0.32056475,
    0.58439255,
    0.99450696,
    0.9738209,
    0.80843997,
    0.6430888,
    0.12400675,
    0.19768947,
    0.83668727,
    0.03199613,
    0.8822202,
    0.3953982,
    0.04918742,
    0.76505345,
    0.252492,
    0.9821432,
    0.59177446,
    0.4227934,
    0.41566586,
    0.72948647,
    0.050724745,
    0.14841765,
    0.9856252,
    0.5721526,
    0.09406263,
    0.19586384,
    0.989901,
    0.11468452,
    0.8905458,
    0.8397297,
    0.15292704,
    0.9761854,
    0.8862974,
    0.19570255,
    0.6742961,
    0.7566153,
    0.94348586,
    0.8656792,
    0.53740174,
    0.36940938,
    0.6004078,
    0.1520319,
    0.88330036,
    0.40524298,
    0.73046666,
    0.13518065,
    0.96740323,
    0.85955745,
    0.68307185,
    0.35721618,
    0.8326176,
    0.76500475,
    0.35422713,
    0.21472698,
    0.27890283,
    0.8798563,
    0.21422249,
    0.8920263,
    0.64119583,
    0.9045915,
    0.47060627,
    0.93395734,
    0.1901356,
    0.8710083,
    0.5467283,
    0.0946722,
    0.44564724,
    0.5996115,
    0.22809523,
    0.7364069,
    0.2746815,
    0.5128781,
    0.831967,
    0.36377645,
    0.8583131,
    0.7817069,
    0.7646761,
    0.25679737,
    0.8234835,
    0.4731866,
    0.24910319,
    0.7706864,
    0.88346916,
    0.74171877,
    0.54038185,
    0.01837486,
    0.60533285,
    0.48072284,
    0.9488643,
    0.27983814,
    0.49408877,
    0.37080318,
    0.44029683,
    0.4898243,
    0.13375807,
    0.5237783,
    0.6405596,
    0.058535516,
    0.7608274,
    0.580463,
    0.84756386,
    0.9521634,
    0.5805268,
    0.8870602,
    0.5851241,
    0.06874114,
    0.0026358962,
    0.40429312,
    0.8730782,
    0.07783908,
    0.7895044,
    0.2763117,
    0.4975866,
    0.53893954,
    0.7998242,
    0.55499214,
    0.62670714,
    0.4990725,
    0.09828472,
    0.5162493,
    0.7812632,
    0.37143993,
    0.2473048,
    0.32816035,
    0.64408326,
    0.388099,
    0.32825315,
    0.38391805,
    0.6167427,
    0.6765616,
    0.8288561,
    0.32406878,
    0.19950092,
    0.2384674,
    0.7792384,
    0.12416881,
    0.39305013,
    0.8860785,
    0.66101885,
    0.29686904,
    0.3276248,
    0.7295076,
    0.32369995,
    0.5766424,
    0.86171234,
    0.531248,
    0.66730344,
    0.5368918,
    0.120851934,
    0.08125204,
    0.45423102,
    0.38098246,
    0.35452706,
    0.75391656,
    0.9155998,
    0.7201631,
    0.26865482,
    0.17629975,
    0.68681955,
    0.42026746,
    0.3518976,
    0.3267631,
    0.95507085,
    0.030205429,
    0.48463517,
    0.7984668,
    0.22058582,
    0.7333866,
    0.9588388,
    0.3720364,
    0.67797196,
    0.576935,
    0.012916446,
    0.96448934,
    0.31127387,
    0.53953683,
    0.92451745,
    0.03861469,
    0.004019439,
    0.64503866,
    0.082496524,
    0.012324274,
    0.5346358,
    0.27457118,
    0.098676324,
    0.11941749,
    0.39060456,
    0.76188576,
    0.9433334,
    0.48092228,
    0.15742075,
    0.64983094,
    0.48231208,
    0.91678834,
    0.8953001,
    0.4479074,
    0.12082344,
    0.7647306,
    0.4128337,
    0.75212646,
    0.81879586,
    0.8035589,
    0.15522707,
    0.5623977,
    0.48174435,
    0.048525274,
    0.5649572,
    0.6026707,
    0.7382386,
    0.8937825,
    0.027943611,
    0.3703683,
    0.60842,
    0.9212166,
    0.16035283,
    0.04575473,
    0.76784605,
    0.8943773,
    0.9356233,
    0.77174693,
    0.30395067,
    0.78587246,
    0.5273946,
    0.15550917,
    0.2221309,
    0.5307534,
    0.9462851,
    0.97387826,
    0.24843597,
    0.3731314,
    0.29406834,
    0.99431545,
    0.13046211,
    0.66599995,
    0.87808,
    0.6214421,
    0.65633225,
    0.5921491,
    0.5946185,
    0.08324039,
    0.19055086,
    0.87942356,
    0.41688514,
    0.7822538,
    0.1980983,
    0.822568,
    0.9530275,
    0.68827534,
    0.15324032,
    0.50618637,
    0.5402372,
    0.42411226,
    0.83494765,
    0.45083457,
    0.33121324,
    0.33913118,
    0.24894845,
    0.21042752,
    0.6416593,
    0.01183486,
    0.13562739,
    0.052022636,
    0.74454534,
    0.23233294,
    0.9426775,
    0.4475289,
    0.40363032,
    0.8102895,
    0.65076226,
    0.25151652,
    0.40571737,
    0.24413377,
    0.37097973,
    0.6214716,
    0.14319164,
    0.6596643,
    0.18973076,
    0.9251287,
    0.7688771,
    0.57981706,
    0.6089882,
    0.68560064,
    0.6218746,
    0.7080833,
    0.37678164,
    0.56724393,
    0.6278938,
    0.7699686,
    0.75862867,
    0.3543977,
    0.8512597,
]
idx = 1
# function rand1f(line = -1)::Float32
#     global idx
#     idx += 1
#     if idx > length(values)
#         idx = 1
#     end
#     #     @printf("returning %d %.4f %d\n", idx, values[idx], line)
#     return values[idx]
# end
rand1f(line = -1) = rand(Float32)
rand2f(line = -1) = Vec2f(rand1f(line), rand1f(line))

rand3f(line = -1) = Vec3f(rand1f(line), rand1f(line), rand1f(line))

function sample_hemisphere_cos_pdf(normal::Vec3f, direction::Vec3f)::Float32
    cosw = dot(normal, direction)
    (cosw <= 0) ? 0 : cosw / pif
end

sample_uniform(size::Int, r::Float32)::Int = clamp(trunc(Int, r * size) + 1, 1, size)

sample_uniform_pdf(size::Int)::Float32 = 1 / size

function sample_discrete(cdf::Vector{Float32}, r::Float32)::Int
    r = clamp(r * last(cdf), 0.0f0, last(cdf) - 0.00001f0)
    #todo
    idx = upper_bound(cdf, r)
    clamp(idx, 1, length(cdf))
end

function upper_bound(cdf::Vector{Float32}, r::Float32)::Int
    idx = 0
    for i in 1:length(cdf)
        if cdf[i] > r
            idx = i
            break
        end
    end
    idx
end

sample_discrete_pdf(cdf::Vector{Float32}, idx::Int)::Float32 =
    if (idx == 1)
        cdf[1]
    else
        cdf[idx] - cdf[idx - 1]
    end

sample_triangle(ruv::Vec2f)::Vec2f = return Vec2f(1 - sqrt(ruv[1]), ruv[2] * sqrt(ruv[1]))

end
